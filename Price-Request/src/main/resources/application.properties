spring.datasource.url=jdbc:h2:file:/data/data;DATABASE_TO_UPPER=false;
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
server.port=8081

#script-based initialization is performed by default only for embedded databases, to always initialize a database using scripts, we'll have to use:
spring.sql.init.mode=always

#By default, the data.sql script executes before Hibernate initialization. This modifies the default Spring Boot behavior and populates the data after the schema is generated by Hibernate.
spring.jpa.defer-datasource-initialization=true
#spring.datasource.initialization-mode=always

#To enable H2 console, we need to add the following property:
#http://localhost:8080/h2-console
spring.h2.console.enabled=true

#Spring provides a JPA-specific property that Hibernate uses for DDL generation: spring.jpa.hibernate.ddl-auto.
#The standard Hibernate property values are create, update, create-drop, validate and none:
#create – Hibernate first drops existing tables and then creates new tables.
#update – The object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no longer required by the application.
#create-drop – similar to create, with the addition that Hibernate will drop the database after all operations are completed; typically used for unit testing
#validate – Hibernate only validates whether the tables and columns exist; otherwise, it throws an exception.
#none – This value effectively turns off the DDL generation.
#Spring Boot internally defaults this parameter value to create-drop if no schema manager has been detected, otherwise none for all other cases.
#We have to set the value carefully or use one of the other mechanisms to initialize the database.
spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.hibernate.ddl-auto = update

spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


#for json format LocalDateTime
#spring.jackson.serialization.write_dates_as_timestamps=false